
/* ==========================================================================
   #TEXT-INPUTS
   ========================================================================== */

/**
 * Input and textarea styles.
 *
 * 1. Removes default iOS input shadow.
 * 2. Incase `.error` class is added directy onto the input element (like on the
 *    Callback form, so styling still shows.
 *
 * NOTE: I've tried to match `.select`, `.btn` and `.text-input` border-size,
 * font-size, line-height and padding so they're all consistant heights.
 */
 
.text-input {
	background-color: $input-bg;
	background-image: none;
	border: $input-border-width $input-border-style $input-border-color;
	border-radius: $input-border-radius;
	box-sizing : border-box;
	color: $input-font-color; 
	display: block;
	font-family : $input-font-family;
	@include font-size(10);
	line-height: $font-lineheight;
	margin-bottom: ($vertical-spacing / 2);
	padding: $input-padding ($gutter / 2);
	-webkit-transition: all $transition-duration $transition-timing-function;
	transition: all $transition-duration $transition-timing-function;
	vertical-align: top;
	width : 100%;
	max-width : 100%;
	-moz-appearance : none;  /* [1] */
	-webkit-appearance : none;  /* [1] */
	
	&:hover {
		border-color: $input-border-color-hover;
	}
	
	&:focus {
		border-color: $input-border-color-focus;
		outline: none;
	}
	
	@include bp(bp4) {
		@include font-size($input-font-size);
	}
	
	&.error {
		border-color: $color-error;
	}
}

/**
 * Remove -webkit- styling on `<input type="search" />`. It changes where text
 * cuts off on the search form if it's left on.
 */
 
.text-input[type="search"] {
	-webkit-appearance: none;
}

.text-input[type="search"]::-webkit-search-decoration,
.text-input[type="search"]::-webkit-search-cancel-button,
.text-input[type="search"]::-webkit-search-results-button,
.text-input[type="search"]::-webkit-search-results-decoration {
	-webkit-appearance: none;
}

/**
 * `textarea specific rules.
 */

textarea.text-input {
	resize: vertical;
}

/**
 * Placeholder text.
 */

.text-input {
	
	&::-webkit-input-placeholder {
		color: $input-placeholder-color; 
		font-family : $input-font-family;
		@include font-size(10);
		
		@include bp(bp5) {
			@include font-size($input-placeholder-font-size);
		}
	}

	&:-moz-placeholder {
		color: $input-placeholder-color;
		font-family: $input-font-family;
		@include font-size(10);
		opacity: 1;

		@include bp(bp5) {
			@include font-size($input-placeholder-font-size);
		}
	}
	
	&::-moz-placeholder {
		color: $input-placeholder-color;
		font-family: $input-font-family;
		@include font-size(10);
		opacity: 1;

		@include bp(bp5) {
			@include font-size($input-placeholder-font-size);
		}
	}
	
	&:-ms-input-placeholder {
		color: $input-placeholder-color;
		font-family: $input-font-family;
		@include font-size(10);
		opacity: 1;

		@include bp(bp5) {
			@include font-size($input-placeholder-font-size);
		}
	}
}

/**
 * Effect to fade out placeholder text when an input is in `:focus`.
 */

[placeholder]:focus::-webkit-input-placeholder {
	opacity: 0;
	-webkit-transition: opacity .5s .5s ease;
	transition: opacity .5s .5s ease;
}





/* ==========================================================================
   #SELECT
   ========================================================================== */

/**
 * Default `select` styling (basic rules).
 */

select {
	margin-bottom: $vertical-spacing;
	width: auto;
	max-width : 100%;
	-moz-appearance: menulist;
	-webkit-appearance: menulist;
}

/**
 * To make `select` elements look 'on brand' we wrap them in a `div` with a
 * class of `.select` to allow custom styling.
 *
 * NOTE: I've tried to match `.select`, `.btn` and `.text-input` border-size,
 * font-size, line-height and padding so they're all consistant heights.
 */

.select {
	display: inline-block;
	position: relative;
	margin-bottom: ($vertical-spacing / 2);
	vertical-align: top;
	width: 100%;
	
	select {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		background: $white url(../img/interface/icon-select-arrows.svg) no-repeat right 10px center;
		border: $border-width $border-style $input-border-color;
		background-size: 12px;
		border-radius: 0;
		color: $font-color;
		cursor: pointer;
		display: inline-block;
		font-family: $font-family;	
		@include font-size(10);
		font-weight: 400;
		line-height: $font-lineheight;
		outline: 0;
		overflow: hidden;
		margin: 0;
		padding: 6px $gutter 6px $gutter / 2;
		-o-text-overflow: ellipsis;
		text-overflow: ellipsis;
		text-transform: capitalize;
		-webkit-transition: all .20s;
		transition: all .15s;
		white-space: nowrap;
		width: 100%;
		
		&::-ms-expand {
			display: none;
		}
		
		&:hover,
		&:focus {
			border-color: darken($grey-lighter,10%);
			color: $grey-darker;
		}
		
		&:disabled {
			opacity: 0.5;
			pointer-events: none;
		}
		
		@include bp(bp4) {
			@include font-size($button-font-size);
		}
	}
}





/* ==========================================================================
   #CHECKBOX + RADIO BUTTONS
   ========================================================================== */
   
/**
 * To apply custom styles to `checkbox` and `radio` inputs we wrap them in a
 * `label` with a class of `.control`. This contains the input and also an empty
 * div called `.control__input` which we use for the styling. `.control` is
 * extended with `*--check` or `*--radio` so we can differentiate the two types
 * of input.
 *
 * 1. The `input` element is hidden...
 * 2. But on click it can still be `checked`. So we can toggle `.control__input`
 *    to show/hide as it directly follows the `input` in the markup.
 */

.control {
	@include clearfix;
	color: $font-color;
	cursor: pointer;
	display: block;
	@include font-size(13);
	margin-bottom: $vertical-spacing / 4;
	padding-left: 25px;
	position: relative;
	
	input { /* [1] */
		height: 15px;
		margin: 0;
		opacity: 0;
		padding: 0;
		position: absolute;
		top: 3px;
		left: 0;
		width: 15px;
		z-index: -1;
		
		&:checked { /* [2] */

			~ .control__input:after {
				display: block;
			}
		}
	}
}

/**
 * We then style the empty div how we'd ideally like the input to look.
 *
 * 1. Add `checked` styling.
 * 2. Disabled styling.
 * 3. Use the `:after` element to show/hide a tick or disc icon when `checked`.
 * 4. `checkbox` specific styling.
 * 5. `radio` specific styling.
 */

.control__input {
	background: $white;
	border: $input-border-width $input-border-style $input-border-color;
	box-sizing: border-box;
	float: left;
	height: 15px;
	margin-left: -25px;
	position: relative;
	top: 3px;
	width: 15px;
	
	//.control:hover input ~ &,
	//.control input:focus ~ &,
	.control input:checked ~ & { /* [1] */
		background: $color-primary;
		border-color: $color-primary-dark;
		box-shadow: none;
	}
	
	.control input:disabled ~ & { /* [2] */
		opacity: 0.5;
		pointer-events: none;
	}
	
	&:after { /* [3] */
		content: '';
		display: none;
		position: absolute;
	}
	
	.control--checkbox & { /* [4] */
		
		&:after {
			background: url(../img/interface/icon-check.svg) no-repeat center center;
			background-size: 100%;
			height: 100%;
			width: 100%;
		}
	}
	
	.control--radio & { /* [5] */
		border-radius: 100%;
		
		&:after {
			background: $white;
			border-radius: 100%;
			box-shadow: 1px 1px rgba($black,.20);
			height: 5px;
			top: 3px;
			left: 3px;
			width: 5px;
		}
	}
}





/* ==========================================================================
   #FORM-GROUP
   ========================================================================== */

/**
 * `.form-group` is used to group labels and inputs/form elements together.
 *
 * 1. All margins are equal for consistency.
 * 2. `Clearfix` is applied to prevent margin collapse, helping with spacing
 *    consistency. And also for when a class of `.form-horz` is used to present
 *    the label and controls horizontally aligned which is achieved using floats
 *    and extended in _768.scss.
 * 3. When a class of `.error` is applied we adjust the colouring of text/input
 *    elements so it stands out, drawing the users attention to where they've
 *    made a mistake entering data on the form.
 */

.form-group__title,
.form-group__controls {
	margin-bottom: $vertical-spacing / 2; /* [1] */
}

.form-group {
	@include clearfix;  /* [2] */
	
	.btn {
		margin-right: $gutter / 4;
		
		&.align-right {
			margin-right: 0;
			margin-left: $gutter / 4;
		}
	}
	
	&.error {  /* [3] */
		
		.form-group__title,
		.required {
			color: $color-error;
		}
		
		.text-input {
			border-color: $color-error;
		}
	}
}

.form-group--btns {
	padding-bottom: $vertical-spacing / 2;
	
	.btn {
		margin-bottom: $vertical-spacing / 2;
	}
}

.error__text {
	@include font-size(12);
	color: $color-error;
	font-weight: 700;
	margin: -25px 0 $vertical-spacing;
}


/**
 * `.form-group__title` is applied to a label (title) to the group of controls.
 */

.form-group__title {
	color: $label-font-color;
	@include font-size(12);
	font-weight: 700;
	line-height: 1.2;
	margin-bottom: $vertical-spacing / 4;
	
	@include bp(bp5) {
		@include font-size($label-font-size);
	}
}

/**
 * Asterisk styling for mandatory fields.
 */

.required {
	color: $color-primary;
	font-style: normal;
}


/**
 * `.form-group__controls` is used to contain elements that require action, for
 * example inputs, textareas, radio/checkboxes and selects.
 *
 * 1. Paragraph margins are adjusted to match that of the form elements.
 */

.form-group__controls {
	@include clearfix;
	
	p {
		margin-bottom: $vertical-spacing/2; /* [1] */
	}
}
