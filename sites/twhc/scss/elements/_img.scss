
/* ==========================================================================
   #IMAGES
   ========================================================================== */

/**
 * Base `img` styles.
 */

img {
	
	border-width : 0;
	vertical-align : middle;
	width: 100%;
	max-width : 100%;
	-ms-interpolation-mode : bicubic;
}

img[width],
img[height] {
	max-width: none;
}


/**
 * Base `video` styles.
 */
 
video {
	display: block;
	height: auto;
	width: 100%;
	max-width: 100%;
}


/**
 * Alignment options to float images..
 */

.img-left {
	float : left;
	margin-right: ($gutter);
	margin-bottom: ($vertical-spacing);
	width : auto;
}

.img-right {
	float: right;
	margin-bottom: ($vertical-spacing);
	margin-left: ($gutter);
	width: auto;
}

.img-center {
	display: block;
	width: auto;
	margin-right: auto;
	margin-bottom: ($vertical-spacing);
	margin-left: auto;
}

/**
 * If the `img` has a container div (maybe a `figure`) we need to apply the
 * class to the parent div.
 */

.img-left,
.img-right,
.img-center {
	
	img {
		width: auto;
	}
}


/**
 * `figure` and `figcatpion` styles.
 */

figure {
	display: block;
	margin: 0 0 ($vertical-spacing) 0;

	img {
		margin-bottom: ($vertical-spacing);
	}
}

figcaption {
	color: $grey-light;
	font-family: $figcaption-font-family;
	@include font-size(12);
	font-style: $figcaption-font-style;
	font-weight: $figcaption-font-weight;
	line-height: 1.4;
	margin-bottom: $vertical-spacing;
	text-transform: $figcaption-text-transform;
	
	@include bp(bp5) {
		@include font-size($font-size);
	}
	
	img + & {
		margin-top: -$vertical-spacing / 2;
	}
}


/**
 * You can make a piece of media 'pop' out of the content area by wrapping it in
 * in a parent div and adding the class of `.pop`.
 *
 * 1. Until we're on desktop and above we only increase the vertical spacing.
 * 2. Pretty pointless but nice transition when resizing the browser.
 * 3. When there's more space, horizintally pop the media out the content area.
 * 4. If the parent div is a `figure` I don't want the `figcaption` text to run
 *    outside of the confines of the main content area, so I add a margin that 
 *    The counter the negative margin set on the `figure`.
 * 5. If the `.pop` element is the last item reduce the margin to the global
 *    value for consistent spacing when aligning to the bottom of the page.
 */
	
.pop {
	margin: ($vertical-spacing * 1.5) 0; /* [1] */
	transition: all .10s; /* [2] */
	
	@include bp(bp7) {
		margin: ($vertical-spacing * 2) -100px; /* [3] */

		img,
		video {
			width: 100%;
		}
		
		figcaption {
			margin: (-$vertical-spacing / 2) 100px $vertical-spacing; /* [4] */
		}
	}
	
	&:last-child {
		margin-bottom: $vertical-spacing; /* [5] */
	}
}





/* ==========================================================================
   #SVG SPRITE ICONS
   ========================================================================== */

/**
 * Default rules for `.icon`s that are part of an inline SVG sprite.
 */

.icon {
	display: inline-block;
    fill: $color-primary;
    height: 1.1em;
    line-height: 40px;
    position: relative;
    top: -2px;
    transition: all .20s;
    vertical-align: middle;
    width: 1.1em;
}
